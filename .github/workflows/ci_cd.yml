name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  SERVER_HOST: ${{ secrets.SERVER_HOSTNAME }}
  SERVER_USER: ${{ secrets.SERVER_USER }}
  SERVER_PORT: ${{ secrets.SERVER_SSH_PORT }}
  SSH_KEY: ${{ secrets.KEY }}
  DOCKER_USER: ${{ secrets.DOCKER_USER }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

jobs:
  python_app_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      
      - name: Check Python version
        run: |
          python --version
          if ! python -c 'import sys; sys.exit(sys.version_info[:2] < (3, 10))'; then
            echo "Python version is less than 3.10"
            exit 1
          fi
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run app.py
        run: |
          python app.py

  Docker_test:
    runs-on: ubuntu-latest
    needs: python_app_test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Build Docker Images
        run: docker compose -f docker-compose.yml build app

      - name: Push Docker Images
        run: |
          echo ${{ env.DOCKER_PASSWORD }} | docker login -u ${{ env.DOCKER_USER }} --password-stdin
          docker compose -f docker-compose.yml push app

  Deploy:
    runs-on: ubuntu-latest
    needs: Docker_test
    steps:
        - name: Install SSH Key
          uses: webfactory/ssh-agent@v0.5.0
          with:
                ssh-private-key: ${{ env.SSH_KEY }}
                      
        - name: Add Server Host to Known Hosts
          run: |
                  mkdir -p ~/.ssh
                  ssh-keyscan -p ${{ env.SERVER_PORT }} -H ${{ env.SERVER_HOST }} >> ~/.ssh/known_hosts
        
        - name: Deploy to server using SSH
          run: | 
                  ssh -p ${{ env.SERVER_PORT }} ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} './deploy.sh'